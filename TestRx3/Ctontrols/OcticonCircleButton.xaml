<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" 
                    xmlns:ts="clr-namespace:System;assembly=mscorlib" 
                    xmlns:tc="clr-namespace:TestRx3"
                    xmlns:local="clr-namespace:TestRx3.Ctontrols">
    <Style x:Key="OcticonCircleButton" TargetType="{x:Type local:OcticonCircleButton}">
        <Setter Property="Control.Background" Value="#00FFFFFF" />
        <Setter Property="Control.Foreground" Value="{StaticResource GHBlueLinkButtonTextBrush}" />
        <Setter Property="Control.FontSize" Value="14" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.Padding" Value="6,0,0,0" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{StaticResource NegativeMarginFocusVisual}" />
        <Setter Property="local:OcticonCircleButton.IconForeground" Value="{StaticResource GHBlueLinkButtonIconBrush}" />
        <Setter Property="local:OcticonCircleButton.ActiveBackground" Value="{StaticResource GitHubAccentBrush}" />
        <Setter Property="local:OcticonCircleButton.ActiveForeground" Value="#FFFFFFFF" />
        <Setter Property="local:OcticonCircleButton.PressedBackground" Value="#20000000" />
        <Setter Property="local:OcticonCircleButton.Icon" Value="mark_github" />
        <Setter Property="FrameworkElement.Height" Value="30" />
        <Setter Property="Control.HorizontalContentAlignment" Value="Right" />
        <Setter Property="Control.VerticalContentAlignment" Value="Center" />
        <Setter Property="local:OcticonButton.IconRotationAngle" Value="0" />
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <ControlTemplate.Triggers>
                        <Trigger Property="Control.HorizontalContentAlignment" Value="Right">
                            <Setter TargetName="contentPresenter" Property="Grid.Column" Value="2" />
                            <Setter TargetName="leftColumn" Property="ColumnDefinition.Width" Value="0" />
                            <Setter TargetName="rightColumn" Property="ColumnDefinition.Width" Value="*" />
                        </Trigger>
                        <Trigger Property="Control.HorizontalContentAlignment" Value="Left">
                            <Setter TargetName="contentPresenter" Property="Grid.Column" Value="0" />
                            <Setter TargetName="leftColumn" Property="ColumnDefinition.Width" Value="*" />
                            <Setter TargetName="rightColumn" Property="ColumnDefinition.Width" Value="0" />
                        </Trigger>
                        <Trigger Property="Control.HorizontalContentAlignment" Value="Center">
                            <Setter TargetName="contentPresenter" Property="Grid.Column" Value="1" />
                            <Setter TargetName="leftColumn" Property="ColumnDefinition.Width" Value="0" />
                            <Setter TargetName="rightColumn" Property="ColumnDefinition.Width" Value="0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="UIElement.IsMouseOver" Value="True" />
                                <Condition Property="ButtonBase.IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Value="{StaticResource GHBlueLinkButtonHoverBrush}" Property="Control.Foreground" />
                        </MultiTrigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="True">
                            <Setter Value="{StaticResource GHBlueLinkButtonPressedBrush}" Property="Control.Foreground" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                    <ControlTemplate.Resources>
                        <QuinticEase x:Key="easing" />
                        <ts:TimeSpan x:Key="animationTime">0:0:0.2</ts:TimeSpan>
                        <Duration x:Key="animationDuration">0:0:0.2</Duration>
                        <ts:TimeSpan x:Key="borderFadeOutBeginTime">0:0:0.10</ts:TimeSpan>
                        <Duration x:Key="borderFadeOutDuration">0:0:0.0</Duration>
                        <tc:ThicknessConverter x:Key="ThicknessToDouble" />
                    </ControlTemplate.Resources>
                    <Grid HorizontalAlignment="Stretch" Background="{TemplateBinding Control.Background}">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation To="0" Duration="{StaticResource animationDuration}" EasingFunction="{StaticResource easing}" Storyboard.TargetName="invertedClip" Storyboard.TargetProperty="(EllipseGeometry.RadiusX)" />
                                        <DoubleAnimation To="0" Duration="{StaticResource animationDuration}" EasingFunction="{StaticResource easing}" Storyboard.TargetName="invertedClip" Storyboard.TargetProperty="(EllipseGeometry.RadiusY)" />
                                        <DoubleAnimation To="1" Duration="0" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <DoubleAnimation To="0.5" Duration="{StaticResource animationDuration}" EasingFunction="{StaticResource easing}" Storyboard.TargetName="invertedClip" Storyboard.TargetProperty="(EllipseGeometry.RadiusX)" />
                                        <DoubleAnimation To="0.5" Duration="{StaticResource animationDuration}" EasingFunction="{StaticResource easing}" Storyboard.TargetName="invertedClip" Storyboard.TargetProperty="(EllipseGeometry.RadiusY)" />
                                        <DoubleAnimation To="0" BeginTime="{StaticResource borderFadeOutBeginTime}" Duration="{StaticResource borderFadeOutDuration}" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <DoubleAnimation To="0.5" Duration="{StaticResource animationDuration}" EasingFunction="{StaticResource easing}" Storyboard.TargetName="invertedClip" Storyboard.TargetProperty="(EllipseGeometry.RadiusX)" />
                                        <DoubleAnimation To="0.5" Duration="{StaticResource animationDuration}" EasingFunction="{StaticResource easing}" Storyboard.TargetName="invertedClip" Storyboard.TargetProperty="(EllipseGeometry.RadiusY)" />
                                        <DoubleAnimation To="0" BeginTime="{StaticResource borderFadeOutBeginTime}" Duration="{StaticResource borderFadeOutDuration}" Storyboard.TargetName="border" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                        <DoubleAnimation To="1" Duration="0" Storyboard.TargetName="pressedEllipse" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimation To="0.3" Duration="0" Storyboard.TargetProperty="(UIElement.Opacity)" />
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualState x:Name="Unfocused" />
                                <VisualState x:Name="Focused" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Name="leftColumn" />
                            <ColumnDefinition Width="{Binding Path=Height, RelativeSource={RelativeSource TemplatedParent}}" />
                            <ColumnDefinition Name="rightColumn" />
                        </Grid.ColumnDefinitions>
                        <tc:FixedAspectRatioPanel x:Name="octiconPanel" VerticalAlignment="Stretch" Grid.Column="1" IsHitTestVisible="True" Background="#00FFFFFF">
                            <Ellipse Name="border" IsHitTestVisible="False" Stroke="{Binding Path=IconForeground, RelativeSource={RelativeSource TemplatedParent}}" StrokeThickness="{Binding Path=BorderThickness, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ThicknessToDouble}}" />
                            <Grid IsHitTestVisible="True">
                                <Viewbox Name="icon" SnapsToDevicePixels="True" Stretch="Uniform">
                                    <Viewbox.Visibility>
                                        <Binding Path="ShowSpinner" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <tc:BooleanToInverseHiddenVisibilityConverter />
                                            </Binding.Converter>
                                        </Binding>
                                    </Viewbox.Visibility>
                                    <Viewbox.Width>
                                        <Binding Path="IconSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </Viewbox.Width>
                                    <Viewbox.Height>
                                        <Binding Path="IconSize" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </Viewbox.Height>
                                    <Path Name="octicon" Height="1024" Stretch="None" RenderTransformOrigin="0.5,0.5" Fill="{Binding Path=IconForeground, RelativeSource={RelativeSource TemplatedParent}}" Data="{Binding Path=(Path.Data), RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path.RenderTransform>
                                            <RotateTransform Angle="{Binding Path=IconRotationAngle, RelativeSource={RelativeSource TemplatedParent}}" />
                                        </Path.RenderTransform>
                                    </Path>
                                </Viewbox>
                                <ProgressBar Name="spinner" Style="{DynamicResource GitHubSyncProgressBar}" IsIndeterminate="True" Height="24" Width="24">
                                    <ProgressBar.Visibility>
                                        <Binding Path="ShowSpinner" RelativeSource="{RelativeSource TemplatedParent}">
                                            <Binding.Converter>
                                                <tc:BooleanToHiddenVisibilityConverter />
                                            </Binding.Converter>
                                        </Binding>
                                    </ProgressBar.Visibility>
                                    <ProgressBar.Foreground>
                                        <Binding Path="IconForeground" RelativeSource="{RelativeSource TemplatedParent}" />
                                    </ProgressBar.Foreground>
                                </ProgressBar>
                                <Grid>
                                    <Grid.Resources>
                                        <tc:BindingProxy x:Key="scale" Data="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type Grid}}, FallbackValue=0}" />
                                    </Grid.Resources>
                                    <Grid.Clip>
                                        <EllipseGeometry x:Name="invertedClip">
                                            <EllipseGeometry.Transform>
                                                <TransformGroup>
                                                    <TranslateTransform X="0.5" Y="0.5" />
                                                    <ScaleTransform ScaleX="{Binding Path=Data, Source={StaticResource scale}}" ScaleY="{Binding Path=Data, Source={StaticResource scale}}" />
                                                </TransformGroup>
                                            </EllipseGeometry.Transform>
                                        </EllipseGeometry>
                                    </Grid.Clip>
                                    <Ellipse Name="activeEllipse" StrokeThickness="0" Fill="{Binding Path=ActiveBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Ellipse Name="pressedEllipse" Opacity="0" StrokeThickness="0" Fill="{Binding Path=PressedBackground, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Viewbox SnapsToDevicePixels="True" Stretch="Uniform" Width="{Binding Path=IconSize, RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding Path=IconSize, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Path Height="1024" Stretch="None" RenderTransformOrigin="0.5,0.5" Fill="{Binding Path=ActiveForeground, RelativeSource={RelativeSource TemplatedParent}}" Data="{Binding Path=(Path.Data), RelativeSource={RelativeSource TemplatedParent}}">
                                            <Path.RenderTransform>
                                                <RotateTransform Angle="{Binding Path=IconRotationAngle, RelativeSource={RelativeSource TemplatedParent}}" />
                                            </Path.RenderTransform>
                                        </Path>
                                    </Viewbox>
                                </Grid>
                            </Grid>
                        </tc:FixedAspectRatioPanel>
                        <ContentPresenter Name="contentPresenter" Margin="{TemplateBinding Control.Padding}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" RecognizesAccessKey="True" Focusable="False" Grid.Column="2" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="{x:Type local:OcticonCircleButton}" BasedOn="{StaticResource OcticonCircleButton}" TargetType="{x:Type local:OcticonCircleButton}" />
</ResourceDictionary>